-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity binary_threshold is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_image_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_image_TVALID : IN STD_LOGIC;
    input_image_TREADY : OUT STD_LOGIC;
    input_image_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_image_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_image_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    input_image_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_image_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_image_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    output_image_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_image_TVALID : OUT STD_LOGIC;
    output_image_TREADY : IN STD_LOGIC;
    output_image_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_image_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_image_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_image_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_image_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_image_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of binary_threshold is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "binary_threshold,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.451000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=400,HLS_SYN_LUT=443,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal length_V : STD_LOGIC_VECTOR (31 downto 0);
    signal length_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_V_0_vld_reg : STD_LOGIC := '0';
    signal length_V_0_ack_out : STD_LOGIC;
    signal threshold_V : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal threshold_V_0_vld_reg : STD_LOGIC := '0';
    signal threshold_V_0_ack_out : STD_LOGIC;
    signal max_val_V : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal max_val_V_0_vld_reg : STD_LOGIC := '0';
    signal max_val_V_0_ack_out : STD_LOGIC;
    signal input_image_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln46_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_image_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln46_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln46_reg_220_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_read_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal threshold_V_read_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_V_read_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln895_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_keep_V_t_reg_229 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_image_strb_V_t_reg_234 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_image_user_V_t_reg_239 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_image_last_V_t_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_image_id_V_tmp_reg_249 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_image_dest_V_t_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln895_1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_output_image_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_input_image_data_V_U_apdone_blk : STD_LOGIC;
    signal input_image_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_TVALID_int : STD_LOGIC;
    signal input_image_TREADY_int : STD_LOGIC;
    signal regslice_both_input_image_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_image_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_image_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_image_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_image_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_image_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_image_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_image_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_image_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_image_user_V_U_apdone_blk : STD_LOGIC;
    signal input_image_TUSER_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_input_image_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_image_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_image_last_V_U_apdone_blk : STD_LOGIC;
    signal input_image_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_image_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_image_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_image_id_V_U_apdone_blk : STD_LOGIC;
    signal input_image_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_input_image_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_image_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_image_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_image_TDEST_int : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_input_image_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_image_dest_V_U_ack_in : STD_LOGIC;
    signal output_image_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal output_image_TVALID_int : STD_LOGIC;
    signal output_image_TREADY_int : STD_LOGIC;
    signal regslice_both_output_image_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_image_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_image_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_image_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_image_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_image_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_image_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_image_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_image_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_image_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_image_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_image_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_image_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_image_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_image_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_image_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_image_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_image_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_image_dest_V_U_vld_out : STD_LOGIC;

    component binary_threshold_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        length_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_val_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    binary_threshold_AXILiteS_s_axi_U : component binary_threshold_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        length_V => length_V,
        threshold_V => threshold_V,
        max_val_V => max_val_V);

    regslice_both_input_image_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_TDATA,
        vld_in => input_image_TVALID,
        ack_in => regslice_both_input_image_data_V_U_ack_in,
        data_out => input_image_TDATA_int,
        vld_out => input_image_TVALID_int,
        ack_out => input_image_TREADY_int,
        apdone_blk => regslice_both_input_image_data_V_U_apdone_blk);

    regslice_both_input_image_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_TKEEP,
        vld_in => input_image_TVALID,
        ack_in => regslice_both_input_image_keep_V_U_ack_in,
        data_out => input_image_TKEEP_int,
        vld_out => regslice_both_input_image_keep_V_U_vld_out,
        ack_out => input_image_TREADY_int,
        apdone_blk => regslice_both_input_image_keep_V_U_apdone_blk);

    regslice_both_input_image_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_TSTRB,
        vld_in => input_image_TVALID,
        ack_in => regslice_both_input_image_strb_V_U_ack_in,
        data_out => input_image_TSTRB_int,
        vld_out => regslice_both_input_image_strb_V_U_vld_out,
        ack_out => input_image_TREADY_int,
        apdone_blk => regslice_both_input_image_strb_V_U_apdone_blk);

    regslice_both_input_image_user_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_TUSER,
        vld_in => input_image_TVALID,
        ack_in => regslice_both_input_image_user_V_U_ack_in,
        data_out => input_image_TUSER_int,
        vld_out => regslice_both_input_image_user_V_U_vld_out,
        ack_out => input_image_TREADY_int,
        apdone_blk => regslice_both_input_image_user_V_U_apdone_blk);

    regslice_both_input_image_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_TLAST,
        vld_in => input_image_TVALID,
        ack_in => regslice_both_input_image_last_V_U_ack_in,
        data_out => input_image_TLAST_int,
        vld_out => regslice_both_input_image_last_V_U_vld_out,
        ack_out => input_image_TREADY_int,
        apdone_blk => regslice_both_input_image_last_V_U_apdone_blk);

    regslice_both_input_image_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_TID,
        vld_in => input_image_TVALID,
        ack_in => regslice_both_input_image_id_V_U_ack_in,
        data_out => input_image_TID_int,
        vld_out => regslice_both_input_image_id_V_U_vld_out,
        ack_out => input_image_TREADY_int,
        apdone_blk => regslice_both_input_image_id_V_U_apdone_blk);

    regslice_both_input_image_dest_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_TDEST,
        vld_in => input_image_TVALID,
        ack_in => regslice_both_input_image_dest_V_U_ack_in,
        data_out => input_image_TDEST_int,
        vld_out => regslice_both_input_image_dest_V_U_vld_out,
        ack_out => input_image_TREADY_int,
        apdone_blk => regslice_both_input_image_dest_V_U_apdone_blk);

    regslice_both_output_image_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_image_TDATA_int,
        vld_in => output_image_TVALID_int,
        ack_in => output_image_TREADY_int,
        data_out => output_image_TDATA,
        vld_out => regslice_both_output_image_data_V_U_vld_out,
        ack_out => output_image_TREADY,
        apdone_blk => regslice_both_output_image_data_V_U_apdone_blk);

    regslice_both_output_image_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_keep_V_t_reg_229,
        vld_in => output_image_TVALID_int,
        ack_in => regslice_both_output_image_keep_V_U_ack_in_dummy,
        data_out => output_image_TKEEP,
        vld_out => regslice_both_output_image_keep_V_U_vld_out,
        ack_out => output_image_TREADY,
        apdone_blk => regslice_both_output_image_keep_V_U_apdone_blk);

    regslice_both_output_image_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_strb_V_t_reg_234,
        vld_in => output_image_TVALID_int,
        ack_in => regslice_both_output_image_strb_V_U_ack_in_dummy,
        data_out => output_image_TSTRB,
        vld_out => regslice_both_output_image_strb_V_U_vld_out,
        ack_out => output_image_TREADY,
        apdone_blk => regslice_both_output_image_strb_V_U_apdone_blk);

    regslice_both_output_image_user_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_user_V_t_reg_239,
        vld_in => output_image_TVALID_int,
        ack_in => regslice_both_output_image_user_V_U_ack_in_dummy,
        data_out => output_image_TUSER,
        vld_out => regslice_both_output_image_user_V_U_vld_out,
        ack_out => output_image_TREADY,
        apdone_blk => regslice_both_output_image_user_V_U_apdone_blk);

    regslice_both_output_image_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_last_V_t_reg_244,
        vld_in => output_image_TVALID_int,
        ack_in => regslice_both_output_image_last_V_U_ack_in_dummy,
        data_out => output_image_TLAST,
        vld_out => regslice_both_output_image_last_V_U_vld_out,
        ack_out => output_image_TREADY,
        apdone_blk => regslice_both_output_image_last_V_U_apdone_blk);

    regslice_both_output_image_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_id_V_tmp_reg_249,
        vld_in => output_image_TVALID_int,
        ack_in => regslice_both_output_image_id_V_U_ack_in_dummy,
        data_out => output_image_TID,
        vld_out => regslice_both_output_image_id_V_U_vld_out,
        ack_out => output_image_TREADY,
        apdone_blk => regslice_both_output_image_id_V_U_apdone_blk);

    regslice_both_output_image_dest_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_image_dest_V_t_reg_254,
        vld_in => output_image_TVALID_int,
        ack_in => regslice_both_output_image_dest_V_U_ack_in_dummy,
        data_out => output_image_TDEST,
        vld_out => regslice_both_output_image_dest_V_U_vld_out,
        ack_out => output_image_TREADY,
        apdone_blk => regslice_both_output_image_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln895_fu_144_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln895_fu_144_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln895_fu_144_p2 = ap_const_lv1_0))) then 
                i_op_assign_reg_133 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0))) then 
                i_op_assign_reg_133 <= i_fu_155_p2;
            end if; 
        end if;
    end process;

    length_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    max_val_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    threshold_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_reg_220 <= icmp_ln46_fu_150_p2;
                icmp_ln46_reg_220_pp0_iter1_reg <= icmp_ln46_reg_220;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0))) then
                icmp_ln895_1_reg_259 <= icmp_ln895_1_fu_189_p2;
                input_image_dest_V_t_reg_254 <= input_image_TDEST_int;
                input_image_id_V_tmp_reg_249 <= input_image_TID_int;
                input_image_keep_V_t_reg_229 <= input_image_TKEEP_int;
                input_image_last_V_t_reg_244 <= input_image_TLAST_int;
                input_image_strb_V_t_reg_234 <= input_image_TSTRB_int;
                input_image_user_V_t_reg_239 <= input_image_TUSER_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((length_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((length_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_V_0_vld_reg = ap_const_logic_1)))) then
                length_V_0_data_reg <= length_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                length_V_read_reg_211 <= length_V_0_data_reg;
                max_val_V_read_reg_201 <= max_val_V_0_data_reg;
                threshold_V_read_reg_206 <= threshold_V_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((max_val_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((max_val_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (max_val_V_0_vld_reg = ap_const_logic_1)))) then
                max_val_V_0_data_reg <= max_val_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((threshold_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((threshold_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (threshold_V_0_vld_reg = ap_const_logic_1)))) then
                threshold_V_0_data_reg <= threshold_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln46_fu_150_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, icmp_ln895_fu_144_p2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state6, regslice_both_output_image_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln895_fu_144_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln46_fu_150_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln46_fu_150_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if (((regslice_both_output_image_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln46_fu_150_p2, input_image_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((input_image_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln46_fu_150_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io, input_image_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((input_image_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln46_fu_150_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io, input_image_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((input_image_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(icmp_ln46_fu_150_p2, input_image_TVALID_int)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((input_image_TVALID_int = ap_const_logic_0) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0));
    end process;


    ap_block_state4_io_assign_proc : process(icmp_ln46_reg_220, output_image_TREADY_int)
    begin
                ap_block_state4_io <= ((output_image_TREADY_int = ap_const_logic_0) and (icmp_ln46_reg_220 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln46_reg_220_pp0_iter1_reg, output_image_TREADY_int)
    begin
                ap_block_state5_io <= ((output_image_TREADY_int = ap_const_logic_0) and (icmp_ln46_reg_220_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln46_fu_150_p2)
    begin
        if ((icmp_ln46_fu_150_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_155_p2 <= std_logic_vector(unsigned(i_op_assign_reg_133) + unsigned(ap_const_lv32_1));
    icmp_ln46_fu_150_p2 <= "1" when (i_op_assign_reg_133 = length_V_read_reg_211) else "0";
    icmp_ln895_1_fu_189_p2 <= "1" when (unsigned(input_image_TDATA_int) > unsigned(threshold_V_read_reg_206)) else "0";
    icmp_ln895_fu_144_p2 <= "1" when (unsigned(threshold_V_0_data_reg) > unsigned(max_val_V_0_data_reg)) else "0";

    input_image_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln46_fu_150_p2, input_image_TVALID_int)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_image_TDATA_blk_n <= input_image_TVALID_int;
        else 
            input_image_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_image_TREADY_assign_proc : process(input_image_TVALID, regslice_both_input_image_data_V_U_ack_in)
    begin
        if (((regslice_both_input_image_data_V_U_ack_in = ap_const_logic_1) and (input_image_TVALID = ap_const_logic_1))) then 
            input_image_TREADY <= ap_const_logic_1;
        else 
            input_image_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_image_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln46_fu_150_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_150_p2 = ap_const_lv1_0))) then 
            input_image_TREADY_int <= ap_const_logic_1;
        else 
            input_image_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    length_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, regslice_both_output_image_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((regslice_both_output_image_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            length_V_0_ack_out <= ap_const_logic_1;
        else 
            length_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    max_val_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, regslice_both_output_image_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((regslice_both_output_image_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            max_val_V_0_ack_out <= ap_const_logic_1;
        else 
            max_val_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    output_image_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln46_reg_220, ap_enable_reg_pp0_iter2, icmp_ln46_reg_220_pp0_iter1_reg, output_image_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln46_reg_220_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_reg_220 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            output_image_TDATA_blk_n <= output_image_TREADY_int;
        else 
            output_image_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_image_TDATA_int <= 
        max_val_V_read_reg_201 when (icmp_ln895_1_reg_259(0) = '1') else 
        ap_const_lv32_0;
    output_image_TVALID <= regslice_both_output_image_data_V_U_vld_out;

    output_image_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln46_reg_220, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_reg_220 = ap_const_lv1_0))) then 
            output_image_TVALID_int <= ap_const_logic_1;
        else 
            output_image_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    threshold_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, regslice_both_output_image_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((regslice_both_output_image_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            threshold_V_0_ack_out <= ap_const_logic_1;
        else 
            threshold_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="binary_threshold,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.451000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=400,HLS_SYN_LUT=443,HLS_VERSION=2019_2}" *)

module binary_threshold (
        ap_clk,
        ap_rst_n,
        input_image_TDATA,
        input_image_TVALID,
        input_image_TREADY,
        input_image_TKEEP,
        input_image_TSTRB,
        input_image_TUSER,
        input_image_TLAST,
        input_image_TID,
        input_image_TDEST,
        output_image_TDATA,
        output_image_TVALID,
        output_image_TREADY,
        output_image_TKEEP,
        output_image_TSTRB,
        output_image_TUSER,
        output_image_TLAST,
        output_image_TID,
        output_image_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_image_TDATA;
input   input_image_TVALID;
output   input_image_TREADY;
input  [3:0] input_image_TKEEP;
input  [3:0] input_image_TSTRB;
input  [1:0] input_image_TUSER;
input  [0:0] input_image_TLAST;
input  [4:0] input_image_TID;
input  [5:0] input_image_TDEST;
output  [31:0] output_image_TDATA;
output   output_image_TVALID;
input   output_image_TREADY;
output  [3:0] output_image_TKEEP;
output  [3:0] output_image_TSTRB;
output  [1:0] output_image_TUSER;
output  [0:0] output_image_TLAST;
output  [4:0] output_image_TID;
output  [5:0] output_image_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg input_image_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] length_V;
reg   [31:0] length_V_0_data_reg;
reg    length_V_0_vld_reg;
reg    length_V_0_ack_out;
wire   [31:0] threshold_V;
reg   [31:0] threshold_V_0_data_reg;
reg    threshold_V_0_vld_reg;
reg    threshold_V_0_ack_out;
wire   [31:0] max_val_V;
reg   [31:0] max_val_V_0_data_reg;
reg    max_val_V_0_vld_reg;
reg    max_val_V_0_ack_out;
reg    input_image_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln46_fu_150_p2;
reg    output_image_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln46_reg_220;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln46_reg_220_pp0_iter1_reg;
reg   [31:0] i_op_assign_reg_133;
reg   [31:0] max_val_V_read_reg_201;
wire    ap_CS_fsm_state2;
reg   [31:0] threshold_V_read_reg_206;
reg   [31:0] length_V_read_reg_211;
wire   [0:0] icmp_ln895_fu_144_p2;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_155_p2;
reg   [3:0] input_image_keep_V_t_reg_229;
reg   [3:0] input_image_strb_V_t_reg_234;
reg   [1:0] input_image_user_V_t_reg_239;
reg   [0:0] input_image_last_V_t_reg_244;
reg   [4:0] input_image_id_V_tmp_reg_249;
reg   [5:0] input_image_dest_V_t_reg_254;
wire   [0:0] icmp_ln895_1_fu_189_p2;
reg   [0:0] icmp_ln895_1_reg_259;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state6;
wire    regslice_both_output_image_data_V_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_input_image_data_V_U_apdone_blk;
wire   [31:0] input_image_TDATA_int;
wire    input_image_TVALID_int;
reg    input_image_TREADY_int;
wire    regslice_both_input_image_data_V_U_ack_in;
wire    regslice_both_input_image_keep_V_U_apdone_blk;
wire   [3:0] input_image_TKEEP_int;
wire    regslice_both_input_image_keep_V_U_vld_out;
wire    regslice_both_input_image_keep_V_U_ack_in;
wire    regslice_both_input_image_strb_V_U_apdone_blk;
wire   [3:0] input_image_TSTRB_int;
wire    regslice_both_input_image_strb_V_U_vld_out;
wire    regslice_both_input_image_strb_V_U_ack_in;
wire    regslice_both_input_image_user_V_U_apdone_blk;
wire   [1:0] input_image_TUSER_int;
wire    regslice_both_input_image_user_V_U_vld_out;
wire    regslice_both_input_image_user_V_U_ack_in;
wire    regslice_both_input_image_last_V_U_apdone_blk;
wire   [0:0] input_image_TLAST_int;
wire    regslice_both_input_image_last_V_U_vld_out;
wire    regslice_both_input_image_last_V_U_ack_in;
wire    regslice_both_input_image_id_V_U_apdone_blk;
wire   [4:0] input_image_TID_int;
wire    regslice_both_input_image_id_V_U_vld_out;
wire    regslice_both_input_image_id_V_U_ack_in;
wire    regslice_both_input_image_dest_V_U_apdone_blk;
wire   [5:0] input_image_TDEST_int;
wire    regslice_both_input_image_dest_V_U_vld_out;
wire    regslice_both_input_image_dest_V_U_ack_in;
wire   [31:0] output_image_TDATA_int;
reg    output_image_TVALID_int;
wire    output_image_TREADY_int;
wire    regslice_both_output_image_data_V_U_vld_out;
wire    regslice_both_output_image_keep_V_U_apdone_blk;
wire    regslice_both_output_image_keep_V_U_ack_in_dummy;
wire    regslice_both_output_image_keep_V_U_vld_out;
wire    regslice_both_output_image_strb_V_U_apdone_blk;
wire    regslice_both_output_image_strb_V_U_ack_in_dummy;
wire    regslice_both_output_image_strb_V_U_vld_out;
wire    regslice_both_output_image_user_V_U_apdone_blk;
wire    regslice_both_output_image_user_V_U_ack_in_dummy;
wire    regslice_both_output_image_user_V_U_vld_out;
wire    regslice_both_output_image_last_V_U_apdone_blk;
wire    regslice_both_output_image_last_V_U_ack_in_dummy;
wire    regslice_both_output_image_last_V_U_vld_out;
wire    regslice_both_output_image_id_V_U_apdone_blk;
wire    regslice_both_output_image_id_V_U_ack_in_dummy;
wire    regslice_both_output_image_id_V_U_vld_out;
wire    regslice_both_output_image_dest_V_U_apdone_blk;
wire    regslice_both_output_image_dest_V_U_ack_in_dummy;
wire    regslice_both_output_image_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 length_V_0_data_reg = 32'd0;
#0 length_V_0_vld_reg = 1'b0;
#0 threshold_V_0_data_reg = 32'd0;
#0 threshold_V_0_vld_reg = 1'b0;
#0 max_val_V_0_data_reg = 32'd0;
#0 max_val_V_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

binary_threshold_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
binary_threshold_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .length_V(length_V),
    .threshold_V(threshold_V),
    .max_val_V(max_val_V)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_image_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_TDATA),
    .vld_in(input_image_TVALID),
    .ack_in(regslice_both_input_image_data_V_U_ack_in),
    .data_out(input_image_TDATA_int),
    .vld_out(input_image_TVALID_int),
    .ack_out(input_image_TREADY_int),
    .apdone_blk(regslice_both_input_image_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_image_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_TKEEP),
    .vld_in(input_image_TVALID),
    .ack_in(regslice_both_input_image_keep_V_U_ack_in),
    .data_out(input_image_TKEEP_int),
    .vld_out(regslice_both_input_image_keep_V_U_vld_out),
    .ack_out(input_image_TREADY_int),
    .apdone_blk(regslice_both_input_image_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_image_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_TSTRB),
    .vld_in(input_image_TVALID),
    .ack_in(regslice_both_input_image_strb_V_U_ack_in),
    .data_out(input_image_TSTRB_int),
    .vld_out(regslice_both_input_image_strb_V_U_vld_out),
    .ack_out(input_image_TREADY_int),
    .apdone_blk(regslice_both_input_image_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_input_image_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_TUSER),
    .vld_in(input_image_TVALID),
    .ack_in(regslice_both_input_image_user_V_U_ack_in),
    .data_out(input_image_TUSER_int),
    .vld_out(regslice_both_input_image_user_V_U_vld_out),
    .ack_out(input_image_TREADY_int),
    .apdone_blk(regslice_both_input_image_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_image_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_TLAST),
    .vld_in(input_image_TVALID),
    .ack_in(regslice_both_input_image_last_V_U_ack_in),
    .data_out(input_image_TLAST_int),
    .vld_out(regslice_both_input_image_last_V_U_vld_out),
    .ack_out(input_image_TREADY_int),
    .apdone_blk(regslice_both_input_image_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 5 ))
regslice_both_input_image_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_TID),
    .vld_in(input_image_TVALID),
    .ack_in(regslice_both_input_image_id_V_U_ack_in),
    .data_out(input_image_TID_int),
    .vld_out(regslice_both_input_image_id_V_U_vld_out),
    .ack_out(input_image_TREADY_int),
    .apdone_blk(regslice_both_input_image_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 6 ))
regslice_both_input_image_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_TDEST),
    .vld_in(input_image_TVALID),
    .ack_in(regslice_both_input_image_dest_V_U_ack_in),
    .data_out(input_image_TDEST_int),
    .vld_out(regslice_both_input_image_dest_V_U_vld_out),
    .ack_out(input_image_TREADY_int),
    .apdone_blk(regslice_both_input_image_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_image_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_image_TDATA_int),
    .vld_in(output_image_TVALID_int),
    .ack_in(output_image_TREADY_int),
    .data_out(output_image_TDATA),
    .vld_out(regslice_both_output_image_data_V_U_vld_out),
    .ack_out(output_image_TREADY),
    .apdone_blk(regslice_both_output_image_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_image_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_keep_V_t_reg_229),
    .vld_in(output_image_TVALID_int),
    .ack_in(regslice_both_output_image_keep_V_U_ack_in_dummy),
    .data_out(output_image_TKEEP),
    .vld_out(regslice_both_output_image_keep_V_U_vld_out),
    .ack_out(output_image_TREADY),
    .apdone_blk(regslice_both_output_image_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_image_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_strb_V_t_reg_234),
    .vld_in(output_image_TVALID_int),
    .ack_in(regslice_both_output_image_strb_V_U_ack_in_dummy),
    .data_out(output_image_TSTRB),
    .vld_out(regslice_both_output_image_strb_V_U_vld_out),
    .ack_out(output_image_TREADY),
    .apdone_blk(regslice_both_output_image_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_output_image_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_user_V_t_reg_239),
    .vld_in(output_image_TVALID_int),
    .ack_in(regslice_both_output_image_user_V_U_ack_in_dummy),
    .data_out(output_image_TUSER),
    .vld_out(regslice_both_output_image_user_V_U_vld_out),
    .ack_out(output_image_TREADY),
    .apdone_blk(regslice_both_output_image_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_image_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_last_V_t_reg_244),
    .vld_in(output_image_TVALID_int),
    .ack_in(regslice_both_output_image_last_V_U_ack_in_dummy),
    .data_out(output_image_TLAST),
    .vld_out(regslice_both_output_image_last_V_U_vld_out),
    .ack_out(output_image_TREADY),
    .apdone_blk(regslice_both_output_image_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 5 ))
regslice_both_output_image_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_id_V_tmp_reg_249),
    .vld_in(output_image_TVALID_int),
    .ack_in(regslice_both_output_image_id_V_U_ack_in_dummy),
    .data_out(output_image_TID),
    .vld_out(regslice_both_output_image_id_V_U_vld_out),
    .ack_out(output_image_TREADY),
    .apdone_blk(regslice_both_output_image_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 6 ))
regslice_both_output_image_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_image_dest_V_t_reg_254),
    .vld_in(output_image_TVALID_int),
    .ack_in(regslice_both_output_image_dest_V_U_ack_in_dummy),
    .data_out(output_image_TDEST),
    .vld_out(regslice_both_output_image_dest_V_U_vld_out),
    .ack_out(output_image_TREADY),
    .apdone_blk(regslice_both_output_image_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln895_fu_144_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln895_fu_144_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln895_fu_144_p2 == 1'd0))) begin
        i_op_assign_reg_133 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_fu_150_p2 == 1'd0))) begin
        i_op_assign_reg_133 <= i_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln46_reg_220 <= icmp_ln46_fu_150_p2;
        icmp_ln46_reg_220_pp0_iter1_reg <= icmp_ln46_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_fu_150_p2 == 1'd0))) begin
        icmp_ln895_1_reg_259 <= icmp_ln895_1_fu_189_p2;
        input_image_dest_V_t_reg_254 <= input_image_TDEST_int;
        input_image_id_V_tmp_reg_249 <= input_image_TID_int;
        input_image_keep_V_t_reg_229 <= input_image_TKEEP_int;
        input_image_last_V_t_reg_244 <= input_image_TLAST_int;
        input_image_strb_V_t_reg_234 <= input_image_TSTRB_int;
        input_image_user_V_t_reg_239 <= input_image_TUSER_int;
    end
end

always @ (posedge ap_clk) begin
    if ((((length_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((length_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_V_0_vld_reg == 1'b1)))) begin
        length_V_0_data_reg <= length_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        length_V_read_reg_211 <= length_V_0_data_reg;
        max_val_V_read_reg_201 <= max_val_V_0_data_reg;
        threshold_V_read_reg_206 <= threshold_V_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((max_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((max_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (max_val_V_0_vld_reg == 1'b1)))) begin
        max_val_V_0_data_reg <= max_val_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((threshold_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((threshold_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (threshold_V_0_vld_reg == 1'b1)))) begin
        threshold_V_0_data_reg <= threshold_V;
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_150_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_fu_150_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_image_TDATA_blk_n = input_image_TVALID_int;
    end else begin
        input_image_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_input_image_data_V_U_ack_in == 1'b1) & (input_image_TVALID == 1'b1))) begin
        input_image_TREADY = 1'b1;
    end else begin
        input_image_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_fu_150_p2 == 1'd0))) begin
        input_image_TREADY_int = 1'b1;
    end else begin
        input_image_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((regslice_both_output_image_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        length_V_0_ack_out = 1'b1;
    end else begin
        length_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((regslice_both_output_image_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        max_val_V_0_ack_out = 1'b1;
    end else begin
        max_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln46_reg_220_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_image_TDATA_blk_n = output_image_TREADY_int;
    end else begin
        output_image_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_reg_220 == 1'd0))) begin
        output_image_TVALID_int = 1'b1;
    end else begin
        output_image_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((regslice_both_output_image_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        threshold_V_0_ack_out = 1'b1;
    end else begin
        threshold_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln895_fu_144_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln46_fu_150_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln46_fu_150_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((regslice_both_output_image_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((input_image_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln46_fu_150_p2 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((input_image_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln46_fu_150_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((input_image_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln46_fu_150_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((input_image_TVALID_int == 1'b0) & (icmp_ln46_fu_150_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state4_io = ((output_image_TREADY_int == 1'b0) & (icmp_ln46_reg_220 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((output_image_TREADY_int == 1'b0) & (icmp_ln46_reg_220_pp0_iter1_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_155_p2 = (i_op_assign_reg_133 + 32'd1);

assign icmp_ln46_fu_150_p2 = ((i_op_assign_reg_133 == length_V_read_reg_211) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_189_p2 = ((input_image_TDATA_int > threshold_V_read_reg_206) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_144_p2 = ((threshold_V_0_data_reg > max_val_V_0_data_reg) ? 1'b1 : 1'b0);

assign output_image_TDATA_int = ((icmp_ln895_1_reg_259[0:0] === 1'b1) ? max_val_V_read_reg_201 : 32'd0);

assign output_image_TVALID = regslice_both_output_image_data_V_U_vld_out;

endmodule //binary_threshold
